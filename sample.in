#------------------------#
#         初期化         #
#------------------------#

# 単位系の決定
units si

# どのような分子をシミュレーションで使用するかを決定します
# 多分地盤材料で使用するのはsphereかbpm/sphereぐらいかな
# 付けるかどうかは任意だけど、シミュレーション中に大きさが可変かどうかを設定できます(0:不変, 1可変)
atom_style sphere 0

# ニュートンの第3法則(作用反作用の法則)を満たすかどうか
# 相対する2粒子間の情報共有のための通信料が増大する代わりに、計算量をわずかに減らせます
newton on

#------------------------#
#       変数の定義        #
#------------------------#

# 杭挿入のために必要な変数
# dz という名前の変数(variable)を用意して、
# それをrunが読みだされている間にxからyまで比例的に変化させてください、という意味です
variable dz equal ramp(0,-0.3)

#------------------------#
#        系の定義         #
#------------------------#

# region: 領域の定義
# シミュレーションのために必要な「領域」を定義するためのコマンド
# 定義した領域は例えば、粒で埋めたりとか、境界領域として使ったりとか、
# 領域内に存在する粒子をグループとして名づけられたりとか、消したりとか色々なことに使えます
# 例えば下のようなコマンドがあった場合、それぞれの文字列は次のような意味を持ちます
#   1     2     3     4   5     6    7  8 9    10      11
# region REG0 block -0.4 0.4 -0.15 0.15 0 2 side in units box
# 1: コマンド名(これは変えられません)
# 2: 領域名(自分で命名する必要あり, アルファベットと数字のみ?)
# 3: スタイル(領域の形, blockの他にもconeとかcylinderとかいろいろある)
# 4~9: 領域のサイズ(x方向の最小値, x方向の最大値, ...みたいな並び順)
# 10: 3で決めたスタイル(立体)において内側を領域とするのか(side in)、外側を領域とするのか(side out)
# 11: 距離単位をどのように決定するのか。boxであればunitsコマンドで指定した単位が採用される。latticeの場合にはこの前に格子間隔を別途定義する必要があります。
region REG0 block -0.4 0.4 -0.15 0.15 0 2 side in units box
region REG1 block -0.4 0.4 -0.15 0.15 0.45 0.5 side in units box

# create_box: シミュレーション用のboxの定義(←よい日本語訳が思いつきません...)
# 一つ上の領域は、単に幾何学的な立体形状に名前を付けただけです
# ここではシミュレーション用のboxの定義とboxの中で使用する粒子の種類数と結合の種類数を記述します。
# コマンドの後の最初の引数が粒子の種類数で、次に領域名がきます。
create_box 1 REG0

# change_box: 一つ上のコマンドで定義したboxのパラメータを追加で変更するコマンド
# 例えばボックスを時間を経て拡大させるとか、せん断ひずみを加えるとかもできます。
# ただここでは境界条件の変更のために使います。
# それぞれの引数の意味は以下の通りです。
# all: ここには本来分子のグループIDというものがきます。
#      グループIDは本来これよりも前もって定義されるものですが、
#      allとすることでbox内の全ての粒子に次の境界条件が適用されるようになります。
# boudary f f f: x, y, z軸方向の境界条件を決定します。fは非周期かつ固定境界を意味します。(他のはドキュメントを参照してください)
change_box all boundary f f f

#------------------------#
#        粒子の定義       #
#------------------------#

# pair_style: 1組の分子間(粒子間)に作用する相互作用を定義します。
# ここは既往文献と合わせてしっかり考えたい場所です！
#   高速化の都合上、以下は塑性せん断変形を考慮したフックの接触理論(gran/hooke/history)を用いています。
#   ただ、他の文献では違う相互作用を使用している場合があるので、用いている理論と使用しているパラメータについてざっと調査をお願いします。
# gran/hooke/historyの後に続く引数は弾性係数、粘弾性減衰係数、静的降伏基準です。(詳しくはドキュメントを参考にしてください)
# ここから下は未検証事項です
#   複数の粒子間相互作用を与えたい場合にはおそらくpair_styleとpair_coeffを繰り返しやらないといけない?
#   おそらくcreate_boxで2種類の粒子があるとした場合は次のような書き方になる?
#   create_box 2 REG0
#   pair_style gran/hooke/history 1000.0 NULL 1000.0 NULL 0.5 0
#   pair_coeff * *                                              (一旦全ての粒子の組み合わせ(1-1, 1-2, 2-2)について一つ上のgran/hooke/historyのパラメータを適用)
#   pair_coeff 1 2 2.0 2.0 1.0 1.0 1.0 1.0                      (1-2の組み合わせの6個のパラメータをそれぞれ2, 2, 1, 1, 1, 1倍する)
#   異なる相互作用モデルを用いても大丈夫なのか??
pair_style gran/hooke/history 1000.0 NULL 1000.0 NULL 0.5 0

# pair_coeff: 上で定義した相互作用を、異なる種類の粒子のどの組み合わせに適用させるかを指示します。

pair_coeff	* *


comm_modify vel yes


# simulation setting
timestep 0.0001

fix BOX1 all nve/sphere
fix GRAV all gravity 9.81 vector 0 0 -1

# set atom * diameter 0.2
fix WALL0 all wall/gran/region hooke/history 1000.0 NULL 1000.0 NULL 0.5 0 region REG0
fix INS all pour 2000 1 300719 vol 0.1 10 region REG1 diam one 0.035 dens 1 2

neighbor 0.1 bin

uncompute thermo_pe
compute contact_atom all contact/atom
compute kinetic_energy all erotate/sphere 
compute stress_atom all stress/atom NULL


thermo_style	custom elapsed atoms
thermo		10000
thermo_modify              lost ignore

run 30000

unfix INS

region REG2 cylinder z 0 0 0.1 0.35 0.8 side out units box move NULL NULL v_dz
fix WALL2 all wall/gran/region hooke/history 100.0 100.0 1.0 1.0 0.5 0 region REG2

run 20000